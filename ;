#include "json.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
//static void
struct { // для определения символов
    int start;
    int end;
} pair_t;


static int
get_task(char const *src, pair_t *stack, int *top)
{
    // перебор содержимого строки для определения границ содержимого
    int i = 0;
    for (i = 0; src[i] != '\0'; i++) {
        if (src[i] == '{') {
            
        }
        else if (src[i] == '[') {
        }
        else if (src[i] == '
    }
}
static int
validation(char const * src)
{
// проверить корректность значений
    // Варианты:
    // { - объект
    // [ - массив
    // 123 - integer
    // 12.3 - double 
    // " - строка
    // true - bool
    // null
    int err = 0;



    return err;
}
static int
parsing(char * str, json_value * value)
{
    int err = 0;
    int top = 1; // специально начинаем, чтобы не было захода за границу массива
    char stack[100] = {0}; // ожидаемые символы
    int i = 0;
    for (i = 0; str[i]; i++)
    {
        if (str[i] == '{' || str[i] == '[') {
            stack[top] = str[i] + 2; // ASCII code '{' - 123; '}' - 125
            top++                   // Diff 2     '[' - 91;  ']' - 93
        }
        else if (str[i] == '}' || str[i] == ']') {
            if (stack[top - 1] != str[i]) {
                err = 1;
                break;
            } else {
                top--;
            }
        } 

        
    } // for (stc[i])

    if (err) {
        fprintf(stderr, "Different character [%c: pos: %i] was expected\n",
                stack[top - 1], i + 1
               );
    }
}
int 
parse2json(char const * src, json_value * value)
{
    int err = 0;
    /*if (validation(src) != 0) {
        return 1;
    }*/
    char *copy_src = strdup(content);
    // Выделить основную часть:
    //
    // Распознать объект или массив
    //
    value->parent = NULL;
    value->type = none;
    value->next = NULL;
    
    err = parsing(copy_src, value);
    if (err) {
        free(copy_src);
    }
    
    return err;
}
